package tests

import (
	yapi "github.com/ianamason/yices2_go_bindings/yices_api"
	"testing"
)

func TestTerms0(t *testing.T) {
	yapi.Init()

	trueC := yapi.True()
	falseC := yapi.False()
	boolT := yapi.BoolType()
	intT := yapi.IntType()
	unintT := yapi.NewUninterpretedType()
	AssertNotEqual(t, trueC, falseC)
	const1 := yapi.Constant(unintT, 0)
	AssertNotEqual(t, const1, yapi.NullTerm)
	const2 := yapi.NewUninterpretedTerm(unintT)
	AssertNotEqual(t, const2, yapi.NullTerm)
	bconst1 := yapi.NewUninterpretedTerm(boolT)
	iconst1 := yapi.NewUninterpretedTerm(intT)
	var1 := yapi.NewVariable(unintT)
	bvar1 := yapi.NewVariable(boolT)
	AssertNotEqual(t, bvar1, yapi.NullTerm)
	ivar1 := yapi.NewVariable(intT)
	ivar2 := yapi.NewVariable(intT)
	ivar3 := yapi.NewVariable(intT)
	ivar4 := yapi.NewVariable(intT)
	zero := yapi.Zero()
	int1 := yapi.Int32(13)
	int2 := yapi.Int32(17)
	AssertEqual(t, zero, yapi.Int32(0))
	fun1T := yapi.FunctionType1(intT, boolT)
	fun1 := yapi.NewVariable(fun1T)
	app1 := yapi.Application1(fun1, int1)
	AssertNotEqual(t, app1, yapi.NullTerm)
	fun2T := yapi.FunctionType2(intT, intT, boolT)
	fun2 := yapi.NewVariable(fun2T)
	app2 := yapi.Application2(fun2, int1, int1)
	AssertNotEqual(t, app2, yapi.NullTerm)
	fun3T := yapi.FunctionType3(intT, intT, intT, boolT)
	fun3 := yapi.NewVariable(fun3T)
	app3 := yapi.Application3(fun3, int1, int1, int1)
	AssertNotEqual(t, app3, yapi.NullTerm)
	tup3T := yapi.TupleType3(boolT, intT, unintT)
	tupconst1 := yapi.NewVariable(tup3T)
	ta4 := []yapi.TypeT{intT, intT, intT, intT}
	int4 := []yapi.TermT{int1, int2, iconst1, ivar1}
	int42 := []yapi.TermT{ivar1, ivar2, ivar3, ivar4}
	fun4T := yapi.FunctionType(ta4, boolT)
	fun4 := yapi.NewVariable(fun4T)
	app4 := yapi.Application(fun4, int4)
	ite1 := yapi.Ite(bconst1, int1, int2)
	eq1 := yapi.Eq(int1, int1)
	neq1 := yapi.Neq(int1, int1)
	not1 := yapi.Not(falseC)
	AssertNotEqual(t, not1, yapi.NullTerm)
	bool5 := []yapi.TermT{falseC, eq1, neq1, app4, falseC}
	or1 := yapi.Or(bool5)
	AssertNotEqual(t, or1, yapi.NullTerm)
	and1 := yapi.And(bool5)
	AssertNotEqual(t, and1, yapi.NullTerm)
	xor1 := yapi.Xor(bool5)
	AssertNotEqual(t, xor1, yapi.NullTerm)
	or2 := yapi.Or2(or1, and1)
	and2 := yapi.And2(or1, and1)
	xor2 := yapi.Xor2(or1, and1)
	or3 := yapi.Or3(or1, and1, or2)
	and3 := yapi.And3(or1, and1, and2)
	AssertNotEqual(t, and3, yapi.NullTerm)
	xor3 := yapi.Xor3(or1, and1, xor2)
	AssertNotEqual(t, xor3, yapi.NullTerm)
	iff1 := yapi.Iff(and1, or1)
	AssertNotEqual(t, iff1, yapi.NullTerm)
	implies1 := yapi.Implies(and1, or1)
	AssertNotEqual(t, implies1, yapi.NullTerm)
	tup1 := yapi.Tuple(int4)
	AssertNotEqual(t, tup1, yapi.NullTerm)
	pair1 := yapi.Pair(eq1, xor2)
	AssertNotEqual(t, pair1, yapi.NullTerm)
	triple1 := yapi.Triple(ite1, fun4, or3)
	AssertNotEqual(t, triple1, yapi.NullTerm)
	select1 := yapi.Select(2, tup1)
	AssertNotEqual(t, select1, yapi.NullTerm)
	select2 := yapi.Select(2, tupconst1)
	AssertNotEqual(t, select2, yapi.NullTerm)
	tupup1 := yapi.TupleUpdate(tup1, 2, int2)
	AssertNotEqual(t, tupup1, yapi.NullTerm)
	update1 := yapi.Update1(fun1, int1, falseC)
	AssertNotEqual(t, update1, yapi.NullTerm)
	update2 := yapi.Update2(fun2, int1, int1, falseC)
	AssertNotEqual(t, update2, yapi.NullTerm)
	update3 := yapi.Update3(fun3, int1, int1, int1, falseC)
	AssertNotEqual(t, update3, yapi.NullTerm)
	update4 := yapi.Update(fun4, int4, falseC)
	AssertNotEqual(t, update4, yapi.NullTerm)
	distinct1 := yapi.Distinct(int4)
	AssertNotEqual(t, distinct1, yapi.NullTerm)
	var2 := yapi.NewVariable(unintT)
	AssertNotEqual(t, var2, yapi.NullTerm)
	vareq := yapi.Eq(var1, var2)
	AssertNotEqual(t, vareq, yapi.NullTerm)
	vars2 := []yapi.TermT{var1, var2}
	AssertNotEqual(t, vars2, yapi.NullTerm)
	forall1 := yapi.Forall(vars2, vareq)
	AssertNotEqual(t, forall1, yapi.NullTerm)
	exists1 := yapi.Exists(vars2, vareq)
	AssertNotEqual(t, exists1, yapi.NullTerm)
	lambda1 := yapi.Lambda(vars2, vareq)
	AssertNotEqual(t, lambda1, yapi.NullTerm)
	int641 := yapi.Int64(42)
	AssertNotEqual(t, int641, yapi.NullTerm)
	rat321 := yapi.Rational32(13, 7)
	AssertNotEqual(t, rat321, yapi.NullTerm)
	rat641 := yapi.Rational64(-47, 111)
	AssertNotEqual(t, rat641, yapi.NullTerm)
	rat1 := yapi.ParseRational("-3/117")
	AssertNotEqual(t, rat1, yapi.NullTerm)
	float1 := yapi.ParseFloat("-3.117e-2")
	AssertNotEqual(t, float1, yapi.NullTerm)
	add1 := yapi.Add(int1, int1)
	AssertNotEqual(t, add1, yapi.NullTerm)
	sub1 := yapi.Sub(int1, zero)
	AssertNotEqual(t, sub1, yapi.NullTerm)
	neg1 := yapi.Neg(int1)
	AssertNotEqual(t, neg1, yapi.NullTerm)
	AssertEqual(t, yapi.Neg(zero), zero)
	AssertNotEqual(t, neg1, int1)
	mul1 := yapi.Mul(int1, int1)
	AssertNotEqual(t, mul1, yapi.NullTerm)
	square1 := yapi.Square(int1)
	AssertEqual(t, mul1, square1)
	power1 := yapi.Power(int1, 4)
	AssertNotEqual(t, power1, yapi.NullTerm)
	sum1 := yapi.Sum(int4)
	AssertNotEqual(t, sum1, yapi.NullTerm)
	product1 := yapi.Product(int4)
	AssertNotEqual(t, product1, yapi.NullTerm)
	product2 := yapi.Product(int42)
	AssertNotEqual(t, product2, yapi.NullTerm)
	div1 := yapi.Division(int1, int1)
	AssertNotEqual(t, div1, yapi.NullTerm)
	idiv1 := yapi.Idiv(int1, int1)
	AssertNotEqual(t, idiv1, yapi.NullTerm)
	imod1 := yapi.Imod(int1, int1)
	AssertNotEqual(t, imod1, yapi.NullTerm)
	divatom1 := yapi.DividesAtom(int1, int1)
	AssertNotEqual(t, divatom1, yapi.NullTerm)
	intatom1 := yapi.IsIntAtom(int1)
	AssertNotEqual(t, intatom1, yapi.NullTerm)
	abs1 := yapi.Abs(neg1)
	AssertEqual(t, abs1, int1)
	floor1 := yapi.Floor(rat1)
	AssertNotEqual(t, floor1, yapi.NullTerm)
	ceil1 := yapi.Ceil(rat1)
	AssertNotEqual(t, ceil1, yapi.NullTerm)
	poly32 := yapi.PolyInt32([]int32{2, 3, 4, 5}, int4)
	AssertNotEqual(t, poly32, yapi.NullTerm)
	poly64 := yapi.PolyInt64([]int64{3, 4, 5, 6}, int4)
	AssertNotEqual(t, poly64, yapi.NullTerm)
	polyrat32 := yapi.PolyRational32([]int32{2, 3, 4, 5}, []uint32{12, 13, 14, 15}, int4)
	AssertNotEqual(t, polyrat32, yapi.NullTerm)
	polyrat64 := yapi.PolyRational64([]int64{2, 3, 4, 5}, []uint64{12, 13, 14, 15}, int4)
	AssertNotEqual(t, polyrat64, yapi.NullTerm)
	areqatom1 := yapi.ArithEqAtom(int1, zero)
	AssertNotEqual(t, areqatom1, yapi.NullTerm)
	arneqatom1 := yapi.ArithNeqAtom(int1, zero)
	AssertNotEqual(t, arneqatom1, yapi.NullTerm)
	argeqatom1 := yapi.ArithGeqAtom(int1, zero)
	AssertNotEqual(t, argeqatom1, yapi.NullTerm)
	arleqatom1 := yapi.ArithLeqAtom(int1, zero)
	AssertNotEqual(t, arleqatom1, yapi.NullTerm)
	argtatom1 := yapi.ArithGtAtom(int1, zero)
	AssertNotEqual(t, argtatom1, yapi.NullTerm)
	arltatom1 := yapi.ArithLtAtom(int1, zero)
	AssertNotEqual(t, arltatom1, yapi.NullTerm)
	areq0atom1 := yapi.ArithEq0Atom(int1)
	AssertNotEqual(t, areq0atom1, yapi.NullTerm)
	arneq0atom1 := yapi.ArithNeq0Atom(int1)
	AssertNotEqual(t, arneq0atom1, yapi.NullTerm)
	argeq0atom1 := yapi.ArithGeq0Atom(int1)
	AssertNotEqual(t, argeq0atom1, yapi.NullTerm)
	arleq0atom1 := yapi.ArithLeq0Atom(int1)
	AssertNotEqual(t, arleq0atom1, yapi.NullTerm)
	argt0atom1 := yapi.ArithGt0Atom(int1)
	AssertNotEqual(t, argt0atom1, yapi.NullTerm)
	arlt0atom1 := yapi.ArithLt0Atom(int1)
	AssertNotEqual(t, arlt0atom1, yapi.NullTerm)
	bvT := yapi.BvType(8)
	AssertNotEqual(t, bvT, yapi.NullType)
	bvconstu321 := yapi.BvconstUint32(8, 42)
	AssertNotEqual(t, bvconstu321, yapi.NullType)
	bvconstu641 := yapi.BvconstUint64(8, 42)
	AssertNotEqual(t, bvconstu641, yapi.NullType)
	bvconst321 := yapi.BvconstInt32(8, 42)
	AssertNotEqual(t, bvconst321, yapi.NullType)
	bvconst641 := yapi.BvconstInt64(8, 42)
	AssertNotEqual(t, bvconst641, yapi.NullType)
	bvconstzero1 := yapi.BvconstZero(16)
	AssertNotEqual(t, bvconstzero1, yapi.NullType)
	bvconstone1 := yapi.BvconstOne(16)
	AssertNotEqual(t, bvconstone1, yapi.NullTerm)
	bvconstminusone1 := yapi.BvconstMinusOne(32)
	AssertNotEqual(t, bvconstminusone1, yapi.NullTerm)
	bvconstarray1 := yapi.BvconstFromArray([]int32{1, 0, 1, 0})
	AssertNotEqual(t, bvconstarray1, yapi.NullTerm)
	bvvar1 := yapi.NewVariable(bvT)
	AssertNotEqual(t, bvvar1, yapi.NullTerm)
	bvvar2 := yapi.NewVariable(bvT)
	AssertNotEqual(t, bvvar2, yapi.NullTerm)
	bvvar3 := yapi.NewVariable(bvT)
	AssertNotEqual(t, bvvar3, yapi.NullTerm)
	bvvar4 := yapi.NewVariable(bvT)
	AssertNotEqual(t, bvvar4, yapi.NullTerm)
	bvbin1 := yapi.ParseBvbin("100101")
	AssertNotEqual(t, bvbin1, yapi.NullTerm)
	bvhex1 := yapi.ParseBvhex("f0a1b3")
	AssertNotEqual(t, bvhex1, yapi.NullTerm)
	bvadd1 := yapi.Bvadd(bvbin1, bvbin1)
	AssertNotEqual(t, bvadd1, yapi.NullTerm)
	bvsub1 := yapi.Bvsub(bvbin1, bvbin1)
	AssertNotEqual(t, bvsub1, yapi.NullTerm)
	bvneg1 := yapi.Bvneg(bvbin1)
	AssertNotEqual(t, bvneg1, yapi.NullTerm)
	bvmul1 := yapi.Bvmul(bvbin1, bvbin1)
	AssertNotEqual(t, bvmul1, yapi.NullTerm)
	bvsquare1 := yapi.Bvsquare(bvbin1)
	AssertNotEqual(t, bvsquare1, yapi.NullTerm)
	bvpower1 := yapi.Bvpower(bvbin1, 3)
	AssertNotEqual(t, bvpower1, yapi.NullTerm)
	bvdiv1 := yapi.Bvdiv(bvbin1, bvbin1)
	AssertNotEqual(t, bvdiv1, yapi.NullTerm)
	bvrem1 := yapi.Bvrem(bvbin1, bvbin1)
	AssertNotEqual(t, bvrem1, yapi.NullTerm)
	bvsdiv1 := yapi.Bvsdiv(bvbin1, bvbin1)
	AssertNotEqual(t, bvsdiv1, yapi.NullTerm)
	bvsrem1 := yapi.Bvsrem(bvbin1, bvbin1)
	AssertNotEqual(t, bvsrem1, yapi.NullTerm)
	bvsmod1 := yapi.Bvsmod(bvbin1, bvbin1)
	AssertNotEqual(t, bvsmod1, yapi.NullTerm)
	bvnot1 := yapi.Bvnot(bvbin1)
	AssertNotEqual(t, bvnot1, yapi.NullTerm)
	bvnand1 := yapi.Bvnand(bvbin1, bvbin1)
	AssertNotEqual(t, bvnand1, yapi.NullTerm)
	bvnor1 := yapi.Bvnor(bvbin1, bvbin1)
	AssertNotEqual(t, bvnor1, yapi.NullTerm)
	bvxnor1 := yapi.Bvxnor(bvbin1, bvbin1)
	AssertNotEqual(t, bvxnor1, yapi.NullTerm)
	bvshl1 := yapi.Bvshl(bvbin1, bvbin1)
	AssertNotEqual(t, bvshl1, yapi.NullTerm)
	bvlshr1 := yapi.Bvlshr(bvbin1, bvbin1)
	AssertNotEqual(t, bvlshr1, yapi.NullTerm)
	bvashr1 := yapi.Bvashr(bvbin1, bvbin1)
	AssertNotEqual(t, bvashr1, yapi.NullTerm)
	bvand1 := yapi.Bvand([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvand1, yapi.NullTerm)
	bvor1 := yapi.Bvor([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvor1, yapi.NullTerm)
	bvand21 := yapi.Bvand2(bvbin1, bvbin1)
	AssertNotEqual(t, bvand21, yapi.NullTerm)
	bvor21 := yapi.Bvor2(bvbin1, bvbin1)
	AssertNotEqual(t, bvor21, yapi.NullTerm)
	bvxor21 := yapi.Bvxor2(bvbin1, bvbin1)
	AssertNotEqual(t, bvxor21, yapi.NullTerm)
	bvand31 := yapi.Bvand3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvand31, yapi.NullTerm)
	bvor31 := yapi.Bvor3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvor31, yapi.NullTerm)
	bvxor31 := yapi.Bvxor3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvxor31, yapi.NullTerm)
	bvsum1 := yapi.Bvsum([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvsum1, yapi.NullTerm)
	bvsum2 := yapi.Bvsum([]yapi.TermT{bvvar1, bvvar2, bvvar3, bvvar4})
	AssertNotEqual(t, bvsum2, yapi.NullTerm)
	bvproduct1 := yapi.Bvproduct([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvproduct1, yapi.NullTerm)
	shleft01 := yapi.ShiftLeft0(bvbin1, 5)
	AssertNotEqual(t, shleft01, yapi.NullTerm)
	shleft11 := yapi.ShiftLeft1(bvbin1, 4)
	AssertNotEqual(t, shleft11, yapi.NullTerm)
	shright01 := yapi.ShiftRight0(bvbin1, 3)
	AssertNotEqual(t, shright01, yapi.NullTerm)
	shright11 := yapi.ShiftRight1(bvbin1, 2)
	AssertNotEqual(t, shright11, yapi.NullTerm)
	ashright1 := yapi.AshiftRight(bvbin1, 1)
	AssertNotEqual(t, ashright1, yapi.NullTerm)
	rotleft1 := yapi.RotateLeft(bvbin1, 6)
	AssertNotEqual(t, rotleft1, yapi.NullTerm)
	rotright1 := yapi.RotateRight(bvbin1, 5)
	AssertNotEqual(t, rotright1, yapi.NullTerm)
	bvextract1 := yapi.Bvextract(bvbin1, 2, 4)
	AssertNotEqual(t, bvextract1, yapi.NullTerm)
	bvconcat21 := yapi.Bvconcat2(bvbin1, bvbin1)
	AssertNotEqual(t, bvconcat21, yapi.NullTerm)
	bvconcat1 := yapi.Bvconcat([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvconcat1, yapi.NullTerm)
	bvrepeat1 := yapi.Bvrepeat(bvbin1, 8)
	AssertNotEqual(t, bvrepeat1, yapi.NullTerm)
	signext1 := yapi.SignExtend(bvbin1, 3)
	AssertNotEqual(t, signext1, yapi.NullTerm)
	zeroext1 := yapi.ZeroExtend(bvbin1, 4)
	AssertNotEqual(t, zeroext1, yapi.NullTerm)
	redand1 := yapi.Redand(bvbin1)
	AssertNotEqual(t, redand1, yapi.NullTerm)
	redor1 := yapi.Redor(bvbin1)
	AssertNotEqual(t, redor1, yapi.NullTerm)
	redcomp1 := yapi.Redcomp(bvbin1, bvbin1)
	AssertNotEqual(t, redcomp1, yapi.NullTerm)
	bvarray1 := yapi.Bvarray([]yapi.TermT{trueC, falseC, trueC, falseC})
	AssertNotEqual(t, bvarray1, yapi.NullTerm)
	bitextract1 := yapi.Bitextract(bvbin1, 3)
	AssertNotEqual(t, bitextract1, yapi.NullTerm)
	bveqatom1 := yapi.BveqAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bveqatom1, yapi.NullTerm)
	bvneqatom1 := yapi.BvneqAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvneqatom1, yapi.NullTerm)
	bvgeatom1 := yapi.BvgeAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvgeatom1, yapi.NullTerm)
	bvgtatom1 := yapi.BvgtAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvgtatom1, yapi.NullTerm)
	bvleatom1 := yapi.BvleAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvleatom1, yapi.NullTerm)
	bvltatom1 := yapi.BvltAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvltatom1, yapi.NullTerm)
	bvsgeatom1 := yapi.BvsgeAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsgeatom1, yapi.NullTerm)
	bvsgtatom1 := yapi.BvsgtAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsgtatom1, yapi.NullTerm)
	bvsleatom1 := yapi.BvsleAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsleatom1, yapi.NullTerm)
	bvsltatom1 := yapi.BvsltAtom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsltatom1, yapi.NullTerm)
	ptype1 := yapi.ParseType("int")
	AssertEqual(t, ptype1, yapi.IntType())
	pterm1 := yapi.ParseTerm("42")
	AssertEqual(t, pterm1, yapi.Int32(42))
	subst1 := yapi.SubstTerm([]yapi.TermT{yapi.NewVariable(ptype1), yapi.NewVariable(ptype1)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3)},
		yapi.Int32(42))
	AssertNotEqual(t, subst1, yapi.NullTerm)
	substarr1 := yapi.SubstTermArray([]yapi.TermT{yapi.NewVariable(ptype1), yapi.NewVariable(ptype1)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3), yapi.Int32(7)})
	AssertNotEqual(t, substarr1, yapi.NullTerm)
	settypename1 := yapi.SetTypeName(ptype1, "I")
	AssertEqual(t, settypename1, int32(0))
	settermname1 := yapi.SetTermName(pterm1, "answer")
	AssertEqual(t, settermname1, 0)
	gettype1 := yapi.GetTypeByName("I")
	AssertEqual(t, gettype1, ptype1)
	getterm1 := yapi.GetTermByName("answer")
	AssertEqual(t, getterm1, pterm1)
	gettypename1 := yapi.GetTypeName(ptype1)
	AssertEqual(t, gettypename1, "I")
	gettermname1 := yapi.GetTermName(pterm1)
	AssertEqual(t, gettermname1, "answer")
	yapi.RemoveTypeName("I")
	yapi.RemoveTermName("answer")
	yapi.ClearTypeName(ptype1)
	yapi.ClearTermName(pterm1)
	typeofterm1 := yapi.TypeOfTerm(pterm1)
	AssertEqual(t, typeofterm1, yapi.IntType())
	AssertTrue(t, yapi.TermIsBool(falseC))
	AssertFalse(t, yapi.TermIsBool(pterm1))
	AssertFalse(t, yapi.TermIsInt(falseC))
	AssertTrue(t, yapi.TermIsInt(pterm1))
	AssertFalse(t, yapi.TermIsReal(falseC))
	AssertFalse(t, yapi.TermIsReal(pterm1))
	AssertFalse(t, yapi.TermIsArithmetic(falseC))
	AssertTrue(t, yapi.TermIsArithmetic(pterm1))
	AssertFalse(t, yapi.TermIsBitvector(falseC))
	AssertTrue(t, yapi.TermIsBitvector(bvbin1))
	AssertFalse(t, yapi.TermIsTuple(falseC))
	AssertTrue(t, yapi.TermIsTuple(tup1))
	AssertFalse(t, yapi.TermIsFunction(falseC))
	AssertTrue(t, yapi.TermIsFunction(fun1))
	AssertFalse(t, yapi.TermIsScalar(falseC))
	AssertFalse(t, yapi.TermIsScalar(fun1))
	AssertEqual(t, yapi.TermBitsize(bvbin1), uint32(6)) //yuk
	AssertTrue(t, yapi.TermIsGround(falseC))
	AssertFalse(t, yapi.TermIsGround(var1))
	AssertTrue(t, yapi.TermIsAtomic(falseC))
	// or1 is atomic because it simplifies to true
	AssertTrue(t, yapi.TermIsAtomic(or1))
	AssertFalse(t, yapi.TermIsComposite(falseC))
	AssertTrue(t, yapi.TermIsComposite(ite1))
	AssertTrue(t, yapi.TermIsComposite(tup1))
	AssertFalse(t, yapi.TermIsProjection(falseC))
	// Select1 simplifies
	AssertFalse(t, yapi.TermIsProjection(select1))
	AssertTrue(t, yapi.TermIsProjection(select2))
	AssertFalse(t, yapi.TermIsSum(ite1))
	AssertTrue(t, yapi.TermIsSum(sum1))
	AssertFalse(t, yapi.TermIsBvsum(select1))
	// bvsum1 simplifies since the terms are all numbers
	AssertFalse(t, yapi.TermIsBvsum(bvsum1))
	AssertTrue(t, yapi.TermIsBvsum(bvsum2))
	AssertFalse(t, yapi.TermIsProduct(ite1))
	AssertFalse(t, yapi.TermIsProduct(product1))
	AssertTrue(t, yapi.TermIsProduct(product2))
	AssertEqual(t, yapi.TermConstructor(trueC), yapi.TermConstructorT(0))      //yuk
	AssertEqual(t, yapi.TermConstructor(int1), yapi.TermConstructorT(1))       //yuk
	AssertEqual(t, yapi.TermConstructor(bvconst321), yapi.TermConstructorT(2)) //yuk
	AssertEqual(t, yapi.TermNumChildren(bvconst321), 0)
	AssertEqual(t, yapi.TermNumChildren(select2), 1)

	AssertEqual(t, yapi.TermNumChildren(tup1), 4)
	AssertEqual(t, yapi.TermChild(tup1, 2), iconst1)
	projarg1 := yapi.ProjArg(select2)
	AssertNotEqual(t, projarg1, yapi.NullTerm)
	AssertEqual(t, yapi.ProjIndex(select2), 2)
	AssertEqual(t, yapi.ProjArg(select2), tupconst1)
	var val int32
	AssertEqual(t, yapi.BoolConstValue(trueC, &val), 0)
	AssertEqual(t, val, 1)
	bval := []int32{0, 0, 0, 0, 0, 0, 0, 0}
	AssertEqual(t, yapi.BvConstValue(bvconst321, bval), 0)
	AssertEqual(t, bval[0:7], []int32{0, 1, 0, 1, 0, 1, 0})
	scalarT := yapi.NewScalarType(20)
	scalarC := yapi.Constant(scalarT, 13)
	AssertEqual(t, yapi.ScalarConstValue(scalarC, &val), 0)
	AssertEqual(t, val, 13)
	AssertEqual(t, yapi.TypeOfTerm(bvsum2), yapi.TypeT(13)) //BD: not very robust
	// val must be an array of eight integers since bvsum has type (bitvector 8)
	var term yapi.TermT
	dodgy := yapi.BvsumComponent(bvsum2, 1, bval, &term)
	AssertEqual(t, dodgy, 0)
	AssertTrue(t, yapi.TermIsBitvector(term))
	AssertTrue(t, yapi.TermIsBitvector(bvvar2))
	AssertEqual(t, bval[0], 1)
	AssertEqual(t, bval[1], 0)
	AssertEqual(t, bval[2], 0)
	AssertEqual(t, bval[3], 0)
	AssertEqual(t, bval[4], 0)
	AssertEqual(t, bval[5], 0)
	AssertEqual(t, bval[6], 0)
	AssertEqual(t, bval[7], 0)
	AssertEqual(t, term, bvvar2)
	var exp1 uint32
	AssertEqual(t, yapi.ProductComponent(product2, 1, &term, &exp1), 0)
	AssertEqual(t, exp1, uint32(1))
	AssertEqual(t, term, ivar2)
	// Note that the next two can change easily
	AssertEqual(t, yapi.NumTerms(), uint32(102))
	AssertEqual(t, yapi.NumTypes(), uint32(26))
	AssertEqual(t, yapi.IncrefTerm(term), 0)
	AssertEqual(t, yapi.NumPosrefTerms(), uint32(1))
	AssertEqual(t, yapi.DecrefTerm(term), 0)
	AssertEqual(t, yapi.NumPosrefTerms(), uint32(0))
	AssertEqual(t, yapi.IncrefType(unintT), 0)
	AssertEqual(t, yapi.NumPosrefTypes(), uint32(1))
	AssertEqual(t, yapi.DecrefType(unintT), 0)
	AssertEqual(t, yapi.NumPosrefTypes(), uint32(0))
	AssertEqual(t, yapi.IncrefTerm(int1), 0)
	AssertEqual(t, yapi.IncrefType(intT), 0)
	yapi.GarbageCollect(int4, ta4, 0)
	AssertEqual(t, yapi.NumTerms(), uint32(7))
	AssertEqual(t, yapi.NumTypes(), uint32(3))

	yapi.Exit()

}

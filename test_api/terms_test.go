package tests

import (
	yapi "github.com/ianamason/yices2_go_bindings/yices_api"
	"testing"
)

func TestTerms0(t *testing.T) {
	yapi.Init()

	true_ := yapi.True()
	false_ := yapi.False()
	bool_t := yapi.Bool_type()
	int_t := yapi.Int_type()
	unint_t := yapi.New_uninterpreted_type()
	AssertNotEqual(t, true_, false_)
	const1 := yapi.Constant(unint_t, 0)
	AssertNotEqual(t, const1, yapi.NULL_TERM)
	const2 := yapi.New_uninterpreted_term(unint_t)
	AssertNotEqual(t, const2, yapi.NULL_TERM)
	bconst1 := yapi.New_uninterpreted_term(bool_t)
	iconst1 := yapi.New_uninterpreted_term(int_t)
	var1 := yapi.New_variable(unint_t)
	bvar1 := yapi.New_variable(bool_t)
	AssertNotEqual(t, bvar1, yapi.NULL_TERM)
	ivar1 := yapi.New_variable(int_t)
	ivar2 := yapi.New_variable(int_t)
	ivar3 := yapi.New_variable(int_t)
	ivar4 := yapi.New_variable(int_t)
	zero := yapi.Zero()
	int1 := yapi.Int32(13)
	int2 := yapi.Int32(17)
	AssertEqual(t, zero, yapi.Int32(0))
	fun1_t := yapi.Function_type1(int_t, bool_t)
	fun1 := yapi.New_variable(fun1_t)
	app1 := yapi.Application1(fun1, int1)
	AssertNotEqual(t, app1, yapi.NULL_TERM)
	fun2_t := yapi.Function_type2(int_t, int_t, bool_t)
	fun2 := yapi.New_variable(fun2_t)
	app2 := yapi.Application2(fun2, int1, int1)
	AssertNotEqual(t, app2, yapi.NULL_TERM)
	fun3_t := yapi.Function_type3(int_t, int_t, int_t, bool_t)
	fun3 := yapi.New_variable(fun3_t)
	app3 := yapi.Application3(fun3, int1, int1, int1)
	AssertNotEqual(t, app3, yapi.NULL_TERM)
	tup3_t := yapi.Tuple_type3(bool_t, int_t, unint_t)
	tupconst1 := yapi.New_variable(tup3_t)
	ta4 := []yapi.TypeT{int_t, int_t, int_t, int_t}
	int4 := []yapi.TermT{int1, int2, iconst1, ivar1}
	int4_2 := []yapi.TermT{ivar1, ivar2, ivar3, ivar4}
	fun4_t := yapi.Function_type(ta4, bool_t)
	fun4 := yapi.New_variable(fun4_t)
	app4 := yapi.Application(fun4, int4)
	ite1 := yapi.Ite(bconst1, int1, int2)
	eq1 := yapi.Eq(int1, int1)
	neq1 := yapi.Neq(int1, int1)
	not1 := yapi.Not(false_)
	AssertNotEqual(t, not1, yapi.NULL_TERM)
	bool5 := []yapi.TermT{false_, eq1, neq1, app4, false_}
	or1 := yapi.Or(bool5)
	AssertNotEqual(t, or1, yapi.NULL_TERM)
	and1 := yapi.And(bool5)
	AssertNotEqual(t, and1, yapi.NULL_TERM)
	xor1 := yapi.Xor(bool5)
	AssertNotEqual(t, xor1, yapi.NULL_TERM)
	or2 := yapi.Or2(or1, and1)
	and2 := yapi.And2(or1, and1)
	xor2 := yapi.Xor2(or1, and1)
	or3 := yapi.Or3(or1, and1, or2)
	and3 := yapi.And3(or1, and1, and2)
	AssertNotEqual(t, and3, yapi.NULL_TERM)
	xor3 := yapi.Xor3(or1, and1, xor2)
	AssertNotEqual(t, xor3, yapi.NULL_TERM)
	iff1 := yapi.Iff(and1, or1)
	AssertNotEqual(t, iff1, yapi.NULL_TERM)
	implies1 := yapi.Implies(and1, or1)
	AssertNotEqual(t, implies1, yapi.NULL_TERM)
	tup1 := yapi.Tuple(int4)
	AssertNotEqual(t, tup1, yapi.NULL_TERM)
	pair1 := yapi.Pair(eq1, xor2)
	AssertNotEqual(t, pair1, yapi.NULL_TERM)
	triple1 := yapi.Triple(ite1, fun4, or3)
	AssertNotEqual(t, triple1, yapi.NULL_TERM)
	select1 := yapi.Select(2, tup1)
	AssertNotEqual(t, select1, yapi.NULL_TERM)
	select2 := yapi.Select(2, tupconst1)
	AssertNotEqual(t, select2, yapi.NULL_TERM)
	tupup1 := yapi.Tuple_update(tup1, 2, int2)
	AssertNotEqual(t, tupup1, yapi.NULL_TERM)
	update1 := yapi.Update1(fun1, int1, false_)
	AssertNotEqual(t, update1, yapi.NULL_TERM)
	update2 := yapi.Update2(fun2, int1, int1, false_)
	AssertNotEqual(t, update2, yapi.NULL_TERM)
	update3 := yapi.Update3(fun3, int1, int1, int1, false_)
	AssertNotEqual(t, update3, yapi.NULL_TERM)
	update4 := yapi.Update(fun4, int4, false_)
	AssertNotEqual(t, update4, yapi.NULL_TERM)
	distinct1 := yapi.Distinct(int4)
	AssertNotEqual(t, distinct1, yapi.NULL_TERM)
	var2 := yapi.New_variable(unint_t)
	AssertNotEqual(t, var2, yapi.NULL_TERM)
	vareq := yapi.Eq(var1, var2)
	AssertNotEqual(t, vareq, yapi.NULL_TERM)
	vars2 := []yapi.TermT{var1, var2}
	AssertNotEqual(t, vars2, yapi.NULL_TERM)
	forall1 := yapi.Forall(vars2, vareq)
	AssertNotEqual(t, forall1, yapi.NULL_TERM)
	exists1 := yapi.Exists(vars2, vareq)
	AssertNotEqual(t, exists1, yapi.NULL_TERM)
	lambda1 := yapi.Lambda(vars2, vareq)
	AssertNotEqual(t, lambda1, yapi.NULL_TERM)
	int64_1 := yapi.Int64(42)
	AssertNotEqual(t, int64_1, yapi.NULL_TERM)
	rat32_1 := yapi.Rational32(13, 7)
	AssertNotEqual(t, rat32_1, yapi.NULL_TERM)
	rat64_1 := yapi.Rational64(-47, 111)
	AssertNotEqual(t, rat64_1, yapi.NULL_TERM)
	rat1 := yapi.Parse_rational("-3/117")
	AssertNotEqual(t, rat1, yapi.NULL_TERM)
	float1 := yapi.Parse_float("-3.117e-2")
	AssertNotEqual(t, float1, yapi.NULL_TERM)
	add1 := yapi.Add(int1, int1)
	AssertNotEqual(t, add1, yapi.NULL_TERM)
	sub1 := yapi.Sub(int1, zero)
	AssertNotEqual(t, sub1, yapi.NULL_TERM)
	neg1 := yapi.Neg(int1)
	AssertNotEqual(t, neg1, yapi.NULL_TERM)
	AssertEqual(t, yapi.Neg(zero), zero)
	AssertNotEqual(t, neg1, int1)
	mul1 := yapi.Mul(int1, int1)
	AssertNotEqual(t, mul1, yapi.NULL_TERM)
	square1 := yapi.Square(int1)
	AssertEqual(t, mul1, square1)
	power1 := yapi.Power(int1, 4)
	AssertNotEqual(t, power1, yapi.NULL_TERM)
	sum1 := yapi.Sum(int4)
	AssertNotEqual(t, sum1, yapi.NULL_TERM)
	product1 := yapi.Product(int4)
	AssertNotEqual(t, product1, yapi.NULL_TERM)
	product2 := yapi.Product(int4_2)
	AssertNotEqual(t, product2, yapi.NULL_TERM)
	div1 := yapi.Division(int1, int1)
	AssertNotEqual(t, div1, yapi.NULL_TERM)
	idiv1 := yapi.Idiv(int1, int1)
	AssertNotEqual(t, idiv1, yapi.NULL_TERM)
	imod1 := yapi.Imod(int1, int1)
	AssertNotEqual(t, imod1, yapi.NULL_TERM)
	divatom1 := yapi.Divides_atom(int1, int1)
	AssertNotEqual(t, divatom1, yapi.NULL_TERM)
	intatom1 := yapi.Is_int_atom(int1)
	AssertNotEqual(t, intatom1, yapi.NULL_TERM)
	abs1 := yapi.Abs(neg1)
	AssertEqual(t, abs1, int1)
	floor1 := yapi.Floor(rat1)
	AssertNotEqual(t, floor1, yapi.NULL_TERM)
	ceil1 := yapi.Ceil(rat1)
	AssertNotEqual(t, ceil1, yapi.NULL_TERM)
	poly32 := yapi.Poly_int32([]int32{2, 3, 4, 5}, int4)
	AssertNotEqual(t, poly32, yapi.NULL_TERM)
	poly64 := yapi.Poly_int64([]int64{3, 4, 5, 6}, int4)
	AssertNotEqual(t, poly64, yapi.NULL_TERM)
	polyrat32 := yapi.Poly_rational32([]int32{2, 3, 4, 5}, []uint32{12, 13, 14, 15}, int4)
	AssertNotEqual(t, polyrat32, yapi.NULL_TERM)
	polyrat64 := yapi.Poly_rational64([]int64{2, 3, 4, 5}, []uint64{12, 13, 14, 15}, int4)
	AssertNotEqual(t, polyrat64, yapi.NULL_TERM)
	areqatom1 := yapi.Arith_eq_atom(int1, zero)
	AssertNotEqual(t, areqatom1, yapi.NULL_TERM)
	arneqatom1 := yapi.Arith_neq_atom(int1, zero)
	AssertNotEqual(t, arneqatom1, yapi.NULL_TERM)
	argeqatom1 := yapi.Arith_geq_atom(int1, zero)
	AssertNotEqual(t, argeqatom1, yapi.NULL_TERM)
	arleqatom1 := yapi.Arith_leq_atom(int1, zero)
	AssertNotEqual(t, arleqatom1, yapi.NULL_TERM)
	argtatom1 := yapi.Arith_gt_atom(int1, zero)
	AssertNotEqual(t, argtatom1, yapi.NULL_TERM)
	arltatom1 := yapi.Arith_lt_atom(int1, zero)
	AssertNotEqual(t, arltatom1, yapi.NULL_TERM)
	areq0atom1 := yapi.Arith_eq0_atom(int1)
	AssertNotEqual(t, areq0atom1, yapi.NULL_TERM)
	arneq0atom1 := yapi.Arith_neq0_atom(int1)
	AssertNotEqual(t, arneq0atom1, yapi.NULL_TERM)
	argeq0atom1 := yapi.Arith_geq0_atom(int1)
	AssertNotEqual(t, argeq0atom1, yapi.NULL_TERM)
	arleq0atom1 := yapi.Arith_leq0_atom(int1)
	AssertNotEqual(t, arleq0atom1, yapi.NULL_TERM)
	argt0atom1 := yapi.Arith_gt0_atom(int1)
	AssertNotEqual(t, argt0atom1, yapi.NULL_TERM)
	arlt0atom1 := yapi.Arith_lt0_atom(int1)
	AssertNotEqual(t, arlt0atom1, yapi.NULL_TERM)
	bv_t := yapi.Bv_type(8)
	AssertNotEqual(t, bv_t, yapi.NULL_TYPE)
	bvconstu32_1 := yapi.Bvconst_uint32(8, 42)
	AssertNotEqual(t, bvconstu32_1, yapi.NULL_TYPE)
	bvconstu64_1 := yapi.Bvconst_uint64(8, 42)
	AssertNotEqual(t, bvconstu64_1, yapi.NULL_TYPE)
	bvconst32_1 := yapi.Bvconst_int32(8, 42)
	AssertNotEqual(t, bvconst32_1, yapi.NULL_TYPE)
	bvconst64_1 := yapi.Bvconst_int64(8, 42)
	AssertNotEqual(t, bvconst64_1, yapi.NULL_TYPE)
	bvconstzero_1 := yapi.Bvconst_zero(16)
	AssertNotEqual(t, bvconstzero_1, yapi.NULL_TYPE)
	bvconstone_1 := yapi.Bvconst_one(16)
	AssertNotEqual(t, bvconstone_1, yapi.NULL_TERM)
	bvconstminusone_1 := yapi.Bvconst_minus_one(32)
	AssertNotEqual(t, bvconstminusone_1, yapi.NULL_TERM)
	bvconstarray1 := yapi.Bvconst_from_array([]int32{1, 0, 1, 0})
	AssertNotEqual(t, bvconstarray1, yapi.NULL_TERM)
	bvvar1 := yapi.New_variable(bv_t)
	AssertNotEqual(t, bvvar1, yapi.NULL_TERM)
	bvvar2 := yapi.New_variable(bv_t)
	AssertNotEqual(t, bvvar2, yapi.NULL_TERM)
	bvvar3 := yapi.New_variable(bv_t)
	AssertNotEqual(t, bvvar3, yapi.NULL_TERM)
	bvvar4 := yapi.New_variable(bv_t)
	AssertNotEqual(t, bvvar4, yapi.NULL_TERM)
	bvbin1 := yapi.Parse_bvbin("100101")
	AssertNotEqual(t, bvbin1, yapi.NULL_TERM)
	bvhex1 := yapi.Parse_bvhex("f0a1b3")
	AssertNotEqual(t, bvhex1, yapi.NULL_TERM)
	bvadd1 := yapi.Bvadd(bvbin1, bvbin1)
	AssertNotEqual(t, bvadd1, yapi.NULL_TERM)
	bvsub1 := yapi.Bvsub(bvbin1, bvbin1)
	AssertNotEqual(t, bvsub1, yapi.NULL_TERM)
	bvneg1 := yapi.Bvneg(bvbin1)
	AssertNotEqual(t, bvneg1, yapi.NULL_TERM)
	bvmul1 := yapi.Bvmul(bvbin1, bvbin1)
	AssertNotEqual(t, bvmul1, yapi.NULL_TERM)
	bvsquare1 := yapi.Bvsquare(bvbin1)
	AssertNotEqual(t, bvsquare1, yapi.NULL_TERM)
	bvpower1 := yapi.Bvpower(bvbin1, 3)
	AssertNotEqual(t, bvpower1, yapi.NULL_TERM)
	bvdiv1 := yapi.Bvdiv(bvbin1, bvbin1)
	AssertNotEqual(t, bvdiv1, yapi.NULL_TERM)
	bvrem1 := yapi.Bvrem(bvbin1, bvbin1)
	AssertNotEqual(t, bvrem1, yapi.NULL_TERM)
	bvsdiv1 := yapi.Bvsdiv(bvbin1, bvbin1)
	AssertNotEqual(t, bvsdiv1, yapi.NULL_TERM)
	bvsrem1 := yapi.Bvsrem(bvbin1, bvbin1)
	AssertNotEqual(t, bvsrem1, yapi.NULL_TERM)
	bvsmod1 := yapi.Bvsmod(bvbin1, bvbin1)
	AssertNotEqual(t, bvsmod1, yapi.NULL_TERM)
	bvnot1 := yapi.Bvnot(bvbin1)
	AssertNotEqual(t, bvnot1, yapi.NULL_TERM)
	bvnand1 := yapi.Bvnand(bvbin1, bvbin1)
	AssertNotEqual(t, bvnand1, yapi.NULL_TERM)
	bvnor1 := yapi.Bvnor(bvbin1, bvbin1)
	AssertNotEqual(t, bvnor1, yapi.NULL_TERM)
	bvxnor1 := yapi.Bvxnor(bvbin1, bvbin1)
	AssertNotEqual(t, bvxnor1, yapi.NULL_TERM)
	bvshl1 := yapi.Bvshl(bvbin1, bvbin1)
	AssertNotEqual(t, bvshl1, yapi.NULL_TERM)
	bvlshr1 := yapi.Bvlshr(bvbin1, bvbin1)
	AssertNotEqual(t, bvlshr1, yapi.NULL_TERM)
	bvashr1 := yapi.Bvashr(bvbin1, bvbin1)
	AssertNotEqual(t, bvashr1, yapi.NULL_TERM)
	bvand1 := yapi.Bvand([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvand1, yapi.NULL_TERM)
	bvor1 := yapi.Bvor([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvor1, yapi.NULL_TERM)
	bvand2_1 := yapi.Bvand2(bvbin1, bvbin1)
	AssertNotEqual(t, bvand2_1, yapi.NULL_TERM)
	bvor2_1 := yapi.Bvor2(bvbin1, bvbin1)
	AssertNotEqual(t, bvor2_1, yapi.NULL_TERM)
	bvxor2_1 := yapi.Bvxor2(bvbin1, bvbin1)
	AssertNotEqual(t, bvxor2_1, yapi.NULL_TERM)
	bvand3_1 := yapi.Bvand3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvand3_1, yapi.NULL_TERM)
	bvor3_1 := yapi.Bvor3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvor3_1, yapi.NULL_TERM)
	bvxor3_1 := yapi.Bvxor3(bvbin1, bvbin1, bvbin1)
	AssertNotEqual(t, bvxor3_1, yapi.NULL_TERM)
	bvsum1 := yapi.Bvsum([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvsum1, yapi.NULL_TERM)
	bvsum2 := yapi.Bvsum([]yapi.TermT{bvvar1, bvvar2, bvvar3, bvvar4})
	AssertNotEqual(t, bvsum2, yapi.NULL_TERM)
	bvproduct1 := yapi.Bvproduct([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvproduct1, yapi.NULL_TERM)
	shleft0_1 := yapi.Shift_left0(bvbin1, 5)
	AssertNotEqual(t, shleft0_1, yapi.NULL_TERM)
	shleft1_1 := yapi.Shift_left1(bvbin1, 4)
	AssertNotEqual(t, shleft1_1, yapi.NULL_TERM)
	shright0_1 := yapi.Shift_right0(bvbin1, 3)
	AssertNotEqual(t, shright0_1, yapi.NULL_TERM)
	shright1_1 := yapi.Shift_right1(bvbin1, 2)
	AssertNotEqual(t, shright1_1, yapi.NULL_TERM)
	ashright_1 := yapi.Ashift_right(bvbin1, 1)
	AssertNotEqual(t, ashright_1, yapi.NULL_TERM)
	rotleft_1 := yapi.Rotate_left(bvbin1, 6)
	AssertNotEqual(t, rotleft_1, yapi.NULL_TERM)
	rotright_1 := yapi.Rotate_right(bvbin1, 5)
	AssertNotEqual(t, rotright_1, yapi.NULL_TERM)
	bvextract1 := yapi.Bvextract(bvbin1, 2, 4)
	AssertNotEqual(t, bvextract1, yapi.NULL_TERM)
	bvconcat2_1 := yapi.Bvconcat2(bvbin1, bvbin1)
	AssertNotEqual(t, bvconcat2_1, yapi.NULL_TERM)
	bvconcat_1 := yapi.Bvconcat([]yapi.TermT{bvbin1, bvbin1, bvbin1, bvbin1})
	AssertNotEqual(t, bvconcat_1, yapi.NULL_TERM)
	bvrepeat1 := yapi.Bvrepeat(bvbin1, 8)
	AssertNotEqual(t, bvrepeat1, yapi.NULL_TERM)
	signext1 := yapi.Sign_extend(bvbin1, 3)
	AssertNotEqual(t, signext1, yapi.NULL_TERM)
	zeroext1 := yapi.Zero_extend(bvbin1, 4)
	AssertNotEqual(t, zeroext1, yapi.NULL_TERM)
	redand1 := yapi.Redand(bvbin1)
	AssertNotEqual(t, redand1, yapi.NULL_TERM)
	redor1 := yapi.Redor(bvbin1)
	AssertNotEqual(t, redor1, yapi.NULL_TERM)
	redcomp1 := yapi.Redcomp(bvbin1, bvbin1)
	AssertNotEqual(t, redcomp1, yapi.NULL_TERM)
	bvarray1 := yapi.Bvarray([]yapi.TermT{true_, false_, true_, false_})
	AssertNotEqual(t, bvarray1, yapi.NULL_TERM)
	bitextract1 := yapi.Bitextract(bvbin1, 3)
	AssertNotEqual(t, bitextract1, yapi.NULL_TERM)
	bveqatom1 := yapi.Bveq_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bveqatom1, yapi.NULL_TERM)
	bvneqatom1 := yapi.Bvneq_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvneqatom1, yapi.NULL_TERM)
	bvgeatom1 := yapi.Bvge_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvgeatom1, yapi.NULL_TERM)
	bvgtatom1 := yapi.Bvgt_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvgtatom1, yapi.NULL_TERM)
	bvleatom1 := yapi.Bvle_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvleatom1, yapi.NULL_TERM)
	bvltatom1 := yapi.Bvlt_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvltatom1, yapi.NULL_TERM)
	bvsgeatom1 := yapi.Bvsge_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsgeatom1, yapi.NULL_TERM)
	bvsgtatom1 := yapi.Bvsgt_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsgtatom1, yapi.NULL_TERM)
	bvsleatom1 := yapi.Bvsle_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsleatom1, yapi.NULL_TERM)
	bvsltatom1 := yapi.Bvslt_atom(bvbin1, bvbin1)
	AssertNotEqual(t, bvsltatom1, yapi.NULL_TERM)
	ptype1 := yapi.Parse_type("int")
	AssertEqual(t, ptype1, yapi.Int_type())
	pterm1 := yapi.Parse_term("42")
	AssertEqual(t, pterm1, yapi.Int32(42))
	subst1 := yapi.Subst_term([]yapi.TermT{yapi.New_variable(ptype1), yapi.New_variable(ptype1)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3)},
		yapi.Int32(42))
	AssertNotEqual(t, subst1, yapi.NULL_TERM)
	substarr1 := yapi.Subst_term_array([]yapi.TermT{yapi.New_variable(ptype1), yapi.New_variable(ptype1)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3)},
		[]yapi.TermT{yapi.Int32(2), yapi.Int32(3), yapi.Int32(7)})
	AssertNotEqual(t, substarr1, yapi.NULL_TERM)
	settypename1 := yapi.Set_type_name(ptype1, "I")
	AssertEqual(t, settypename1, int32(0))
	settermname1 := yapi.Set_term_name(pterm1, "answer")
	AssertEqual(t, settermname1, 0)
	gettype1 := yapi.Get_type_by_name("I")
	AssertEqual(t, gettype1, ptype1)
	getterm1 := yapi.Get_term_by_name("answer")
	AssertEqual(t, getterm1, pterm1)
	gettypename1 := yapi.Get_type_name(ptype1)
	AssertEqual(t, gettypename1, "I")
	gettermname1 := yapi.Get_term_name(pterm1)
	AssertEqual(t, gettermname1, "answer")
	yapi.Remove_type_name("I")
	yapi.Remove_term_name("answer")
	yapi.Clear_type_name(ptype1)
	yapi.Clear_term_name(pterm1)
	typeofterm1 := yapi.Type_of_term(pterm1)
	AssertEqual(t, typeofterm1, yapi.Int_type())
	AssertTrue(t, yapi.Term_is_bool(false_))
	AssertFalse(t, yapi.Term_is_bool(pterm1))
	AssertFalse(t, yapi.Term_is_int(false_))
	AssertTrue(t, yapi.Term_is_int(pterm1))
	AssertFalse(t, yapi.Term_is_real(false_))
	AssertFalse(t, yapi.Term_is_real(pterm1))
	AssertFalse(t, yapi.Term_is_arithmetic(false_))
	AssertTrue(t, yapi.Term_is_arithmetic(pterm1))
	AssertFalse(t, yapi.Term_is_bitvector(false_))
	AssertTrue(t, yapi.Term_is_bitvector(bvbin1))
	AssertFalse(t, yapi.Term_is_tuple(false_))
	AssertTrue(t, yapi.Term_is_tuple(tup1))
	AssertFalse(t, yapi.Term_is_function(false_))
	AssertTrue(t, yapi.Term_is_function(fun1))
	AssertFalse(t, yapi.Term_is_scalar(false_))
	AssertFalse(t, yapi.Term_is_scalar(fun1))
	AssertEqual(t, yapi.Term_bitsize(bvbin1), uint32(6)) //yuk
	AssertTrue(t, yapi.Term_is_ground(false_))
	AssertFalse(t, yapi.Term_is_ground(var1))
	AssertTrue(t, yapi.Term_is_atomic(false_))
	// or1 is atomic because it simplifies to true
	AssertTrue(t, yapi.Term_is_atomic(or1))
	AssertFalse(t, yapi.Term_is_composite(false_))
	AssertTrue(t, yapi.Term_is_composite(ite1))
	AssertTrue(t, yapi.Term_is_composite(tup1))
	AssertFalse(t, yapi.Term_is_projection(false_))
	// Select1 simplifies
	AssertFalse(t, yapi.Term_is_projection(select1))
	AssertTrue(t, yapi.Term_is_projection(select2))
	AssertFalse(t, yapi.Term_is_sum(ite1))
	AssertTrue(t, yapi.Term_is_sum(sum1))
	AssertFalse(t, yapi.Term_is_bvsum(select1))
	// bvsum1 simplifies since the terms are all numbers
	AssertFalse(t, yapi.Term_is_bvsum(bvsum1))
	AssertTrue(t, yapi.Term_is_bvsum(bvsum2))
	AssertFalse(t, yapi.Term_is_product(ite1))
	AssertFalse(t, yapi.Term_is_product(product1))
	AssertTrue(t, yapi.Term_is_product(product2))
	AssertEqual(t, yapi.Term_constructor(true_), yapi.Term_constructor_t(0))       //yuk
	AssertEqual(t, yapi.Term_constructor(int1), yapi.Term_constructor_t(1))        //yuk
	AssertEqual(t, yapi.Term_constructor(bvconst32_1), yapi.Term_constructor_t(2)) //yuk
	AssertEqual(t, yapi.Term_num_children(bvconst32_1), 0)
	AssertEqual(t, yapi.Term_num_children(select2), 1)

	AssertEqual(t, yapi.Term_num_children(tup1), 4)
	AssertEqual(t, yapi.Term_child(tup1, 2), iconst1)
	projarg1 := yapi.Proj_arg(select2)
	AssertNotEqual(t, projarg1, yapi.NULL_TERM)
	AssertEqual(t, yapi.Proj_index(select2), 2)
	AssertEqual(t, yapi.Proj_arg(select2), tupconst1)
	var val int32
	AssertEqual(t, yapi.Bool_const_value(true_, &val), 0)
	AssertEqual(t, val, 1)
	bval := []int32{0, 0, 0, 0, 0, 0, 0, 0}
	AssertEqual(t, yapi.Bv_const_value(bvconst32_1, bval), 0)
	AssertEqual(t, bval[0:7], []int32{0, 1, 0, 1, 0, 1, 0})
	scalar_t := yapi.New_scalar_type(20)
	scalar_c := yapi.Constant(scalar_t, 13)
	AssertEqual(t, yapi.Scalar_const_value(scalar_c, &val), 0)
	AssertEqual(t, val, 13)
	AssertEqual(t, yapi.Type_of_term(bvsum2), yapi.TypeT(13)) //BD: not very robust
	// val must be an array of eight integers since bvsum has type (bitvector 8)
	var term yapi.TermT
	dodgy := yapi.Bvsum_component(bvsum2, 1, bval, &term)
	AssertEqual(t, dodgy, 0)
	AssertTrue(t, yapi.Term_is_bitvector(term))
	AssertTrue(t, yapi.Term_is_bitvector(bvvar2))
	AssertEqual(t, bval[0], 1)
	AssertEqual(t, bval[1], 0)
	AssertEqual(t, bval[2], 0)
	AssertEqual(t, bval[3], 0)
	AssertEqual(t, bval[4], 0)
	AssertEqual(t, bval[5], 0)
	AssertEqual(t, bval[6], 0)
	AssertEqual(t, bval[7], 0)
	AssertEqual(t, term, bvvar2)
	var exp1 uint32
	AssertEqual(t, yapi.Product_component(product2, 1, &term, &exp1), 0)
	AssertEqual(t, exp1, uint32(1))
	AssertEqual(t, term, ivar2)
	// Note that the next two can change easily
	AssertEqual(t, yapi.Num_terms(), uint32(102))
	AssertEqual(t, yapi.Num_types(), uint32(26))
	AssertEqual(t, yapi.Incref_term(term), 0)
	AssertEqual(t, yapi.Num_posref_terms(), uint32(1))
	AssertEqual(t, yapi.Decref_term(term), 0)
	AssertEqual(t, yapi.Num_posref_terms(), uint32(0))
	AssertEqual(t, yapi.Incref_type(unint_t), 0)
	AssertEqual(t, yapi.Num_posref_types(), uint32(1))
	AssertEqual(t, yapi.Decref_type(unint_t), 0)
	AssertEqual(t, yapi.Num_posref_types(), uint32(0))
	AssertEqual(t, yapi.Incref_term(int1), 0)
	AssertEqual(t, yapi.Incref_type(int_t), 0)
	yapi.Garbage_collect(int4, ta4, 0)
	AssertEqual(t, yapi.Num_terms(), uint32(7))
	AssertEqual(t, yapi.Num_types(), uint32(3))

	yapi.Exit()

}
